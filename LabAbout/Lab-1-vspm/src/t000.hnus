#---输入指令:1:	(I,	_,	_,	a	)
in R1			#输入一个值
movi 0 			#将变量的内存地址值赋值到R0
movb R0,R1 		#将R1的值赋值给变量所在的内存地址
#---赋值指令:2:	(=,	0,	_,	c	)
movi 0			#立即数赋值语句，将值0赋给R0
mova R1,R0		#将立即数拷贝到R1中
movi 2			# 将变量的内存地址值赋值到R0
movb R0,R1		# 将立即数的值拷贝到变量的内存处
#---赋值指令:3:	(=,	a,	_,	b	)
movi 0 			#将变量b的内存地址值赋值到R0
movc R1,R0		#从内存中取出b的值到R1
movi 1			#将变量a的内存地址值赋值到R0
movb R0,R1 		#将R1的值（即b）赋值给a所在的内存地址
#---大于跳转指令:4:	(J>,	b,	0,	8	)
movi 1 			#大于跳转指令，变量a的内存地址放入R0
movc R1,R0 		#大于跳转，变量a从内存地址R0拷贝至R1
movi 0 			#大于跳转指令，常数b放入R0
mova R2,R0 		#大于跳转指令，常数b从R0拷贝至R2
sub R1,R2		#R1减去R2，同时设置G值
movi 43			#绝对偏移地址
mova R3,R0 		#设置跳转地址
JG 				#大于则跳转
#---无条件跳转指令:5:	(J,	_,	_,	11	)
#直接跳转指令
movi 57			#绝对偏移地址
mova R3,R0 		#设置跳转地址
jmp 			#准备跳转
#---自减指令:6:	(--,	b,	1,	b	)
movi 1 			#自减指令，变量的内存地址放入R0
movc R2,R0 		#自减指令，变量从内存地址R0拷贝至R2
movi -1 		#自减指令，R0设置为1 
add R2,R0 		#自减指令，变量加1
movi 1 			#自减指令，变量的内存地址放入R0
movb R0,R2 		#自减指令，变量加1后写回内存
#---无条件跳转指令:7:	(J,	_,	_,	4	)
#直接跳转指令
movi 23			#绝对偏移地址
mova R3,R0 		#设置跳转地址
jmp 			#准备跳转
#---加法指令:8:	(+,	c,	b,	T1	)
movi 2			#做加法，将被加数的内存地址值赋值到R0
movc R1,R0 		#做加法,从被加数的内存地址中取得被加数的值放R1
movi 1			#做加法，将加数的内存地址值赋值到R0
movc R2,R0 		#做加法,从加数的内存地址中取得被加数的值放R2
add R1,R2 		#加法运算
movi 3			#做加法，将结果的内存地址值赋值到R0
movb R0,R1 		#做加法,将结果放回至内存
#---赋值指令:9:	(=,	T1,	_,	c	)
movi 3 			#将变量b的内存地址值赋值到R0
movc R1,R0		#从内存中取出b的值到R1
movi 2			#将变量a的内存地址值赋值到R0
movb R0,R1 		#将R1的值（即b）赋值给a所在的内存地址
#---无条件跳转指令:10:	(J,	_,	_,	6	)
#直接跳转指令
movi 34			#绝对偏移地址
mova R3,R0 		#设置跳转地址
jmp 			#准备跳转
#---输出指令:11:	(O,	_,	_,	c	)
movi 2			#将变量的内存地址赋值给R0
movc R1,R0		#将变量的值从内存送到寄存器R1
out R1			#输出变量的值
mova R0,R0 		#空指令
halt
